/* tslint:disable */
/* eslint-disable */
/**
 * Supply Chain - Logistics API
 * The Supply Chain - Logistics API description
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { AllPickUpPointResponseDto } from '../models';
// @ts-ignore
import type { AllVehiclesResponseDto } from '../models';
// @ts-ignore
import type { CreatePickUpPointRequestDto } from '../models';
// @ts-ignore
import type { CreatePickUpPointResponseDto } from '../models';
// @ts-ignore
import type { CreateVehicleRequestDto } from '../models';
// @ts-ignore
import type { CreateVehicleResponseDto } from '../models';
/**
 * OperationApi - axios parameter creator
 * @export
 */
export const OperationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        allPickUpPoint: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/operation/all-pick-up-point`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        allVehicles: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/operation/all-vehicles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreatePickUpPointRequestDto} createPickUpPointRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPickUpPoint: async (createPickUpPointRequestDto: CreatePickUpPointRequestDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createPickUpPointRequestDto' is not null or undefined
            assertParamExists('createPickUpPoint', 'createPickUpPointRequestDto', createPickUpPointRequestDto)
            const localVarPath = `/operation/create-pick-up-point`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createPickUpPointRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateVehicleRequestDto} createVehicleRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createVehicle: async (createVehicleRequestDto: CreateVehicleRequestDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createVehicleRequestDto' is not null or undefined
            assertParamExists('createVehicle', 'createVehicleRequestDto', createVehicleRequestDto)
            const localVarPath = `/operation/create-vehicle`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createVehicleRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OperationApi - functional programming interface
 * @export
 */
export const OperationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OperationApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async allPickUpPoint(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AllPickUpPointResponseDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.allPickUpPoint(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OperationApi.allPickUpPoint']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async allVehicles(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AllVehiclesResponseDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.allVehicles(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OperationApi.allVehicles']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {CreatePickUpPointRequestDto} createPickUpPointRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPickUpPoint(createPickUpPointRequestDto: CreatePickUpPointRequestDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreatePickUpPointResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createPickUpPoint(createPickUpPointRequestDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OperationApi.createPickUpPoint']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {CreateVehicleRequestDto} createVehicleRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createVehicle(createVehicleRequestDto: CreateVehicleRequestDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateVehicleResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createVehicle(createVehicleRequestDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OperationApi.createVehicle']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * OperationApi - factory interface
 * @export
 */
export const OperationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OperationApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        allPickUpPoint(options?: RawAxiosRequestConfig): AxiosPromise<Array<AllPickUpPointResponseDto>> {
            return localVarFp.allPickUpPoint(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        allVehicles(options?: RawAxiosRequestConfig): AxiosPromise<Array<AllVehiclesResponseDto>> {
            return localVarFp.allVehicles(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreatePickUpPointRequestDto} createPickUpPointRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPickUpPoint(createPickUpPointRequestDto: CreatePickUpPointRequestDto, options?: RawAxiosRequestConfig): AxiosPromise<CreatePickUpPointResponseDto> {
            return localVarFp.createPickUpPoint(createPickUpPointRequestDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreateVehicleRequestDto} createVehicleRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createVehicle(createVehicleRequestDto: CreateVehicleRequestDto, options?: RawAxiosRequestConfig): AxiosPromise<CreateVehicleResponseDto> {
            return localVarFp.createVehicle(createVehicleRequestDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * OperationApi - object-oriented interface
 * @export
 * @class OperationApi
 * @extends {BaseAPI}
 */
export class OperationApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OperationApi
     */
    public allPickUpPoint(options?: RawAxiosRequestConfig) {
        return OperationApiFp(this.configuration).allPickUpPoint(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OperationApi
     */
    public allVehicles(options?: RawAxiosRequestConfig) {
        return OperationApiFp(this.configuration).allVehicles(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CreatePickUpPointRequestDto} createPickUpPointRequestDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OperationApi
     */
    public createPickUpPoint(createPickUpPointRequestDto: CreatePickUpPointRequestDto, options?: RawAxiosRequestConfig) {
        return OperationApiFp(this.configuration).createPickUpPoint(createPickUpPointRequestDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CreateVehicleRequestDto} createVehicleRequestDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OperationApi
     */
    public createVehicle(createVehicleRequestDto: CreateVehicleRequestDto, options?: RawAxiosRequestConfig) {
        return OperationApiFp(this.configuration).createVehicle(createVehicleRequestDto, options).then((request) => request(this.axios, this.basePath));
    }
}

